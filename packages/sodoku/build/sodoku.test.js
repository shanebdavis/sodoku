"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "describe", "assert", "squareNumberForLocation", "get9XY", "get81XY", "eachElementInColumn", "eachElementInRow", "eachElementInSquare", "isAllValid", "clone", "getLegalNumbers", "solve", "isAllLegal", "identifyLegalPlacements"], [global, require('art-standard-lib'), require('art-testbench'), require('./sodoku')], (test, describe, assert, squareNumberForLocation, get9XY, get81XY, eachElementInColumn, eachElementInRow, eachElementInSquare, isAllValid, clone, getLegalNumbers, solve, isAllLegal, identifyLegalPlacements) => {let validBoard, onlySquaresInvalidBoard, puzzle90, puzzle1, puzzle1FastPass1, puzzle1FastPass2, puzzle1FastPass3, puzzle1FastPass4, boardWith2Solutions, slowToSolveBoard, newBlankBoard; validBoard = [[5, 4, 1, 8, 6, 2, 9, 3, 7], [6, 2, 9, 3, 5, 7, 4, 1, 8], [3, 8, 7, 1, 4, 9, 2, 6, 5], [4, 6, 8, 7, 1, 3, 5, 2, 9], [1, 3, 5, 2, 9, 4, 7, 8, 6], [7, 9, 2, 5, 8, 6, 3, 4, 1], [2, 7, 6, 9, 3, 8, 1, 5, 4], [9, 5, 4, 6, 2, 1, 8, 7, 3], [8, 1, 3, 4, 7, 5, 6, 9, 2]]; onlySquaresInvalidBoard = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 1, 2, 3, 4, 5, 6, 7, 8], [8, 9, 1, 2, 3, 4, 5, 6, 7], [7, 8, 9, 1, 2, 3, 4, 5, 6], [6, 7, 8, 9, 1, 2, 3, 4, 5], [5, 6, 7, 8, 9, 1, 2, 3, 4], [4, 5, 6, 7, 8, 9, 1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 1, 2], [2, 3, 4, 5, 6, 7, 8, 9, 1]]; puzzle90 = [[0, 2, 5, 4, 0, 0, 6, 0, 0], [4, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 2, 0, 5, 7, 0], [2, 0, 0, 1, 0, 0, 0, 5, 7], [0, 0, 1, 0, 4, 0, 2, 0, 0], [9, 8, 0, 0, 0, 5, 0, 0, 1], [0, 6, 2, 0, 1, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 6], [0, 0, 9, 0, 0, 8, 1, 4, 0]]; puzzle1 = [[5, 0, 0, 0, 6, 2, 9, 3, 7], [0, 2, 9, 0, 0, 7, 4, 1, 0], [0, 0, 7, 1, 4, 9, 2, 0, 5], [4, 6, 0, 0, 0, 3, 0, 0, 0], [1, 0, 0, 2, 9, 4, 0, 0, 6], [0, 0, 0, 5, 0, 0, 0, 4, 1], [2, 0, 6, 9, 3, 8, 1, 0, 0], [0, 5, 4, 6, 0, 0, 8, 7, 0], [8, 1, 3, 4, 7, 0, 0, 0, 2]]; puzzle1FastPass1 = [[5, 0, 0, 8, 6, 2, 9, 3, 7], [0, 2, 9, 0, 0, 7, 4, 1, 8], [0, 0, 7, 1, 4, 9, 2, 0, 5], [4, 6, 0, 0, 0, 3, 0, 0, 0], [1, 0, 0, 2, 9, 4, 0, 0, 6], [0, 0, 0, 5, 8, 6, 0, 4, 1], [2, 7, 6, 9, 3, 8, 1, 5, 4], [9, 5, 4, 6, 0, 1, 8, 7, 0], [8, 1, 3, 4, 7, 5, 0, 0, 2]]; puzzle1FastPass2 = [[5, 4, 1, 8, 6, 2, 9, 3, 7], [0, 2, 9, 3, 5, 7, 4, 1, 8], [0, 0, 7, 1, 4, 9, 2, 6, 5], [4, 6, 0, 7, 1, 3, 0, 0, 9], [1, 0, 0, 2, 9, 4, 0, 8, 6], [0, 0, 2, 5, 8, 6, 0, 4, 1], [2, 7, 6, 9, 3, 8, 1, 5, 4], [9, 5, 4, 6, 2, 1, 8, 7, 3], [8, 1, 3, 4, 7, 5, 6, 0, 2]]; puzzle1FastPass3 = [[5, 4, 1, 8, 6, 2, 9, 3, 7], [6, 2, 9, 3, 5, 7, 4, 1, 8], [3, 0, 7, 1, 4, 9, 2, 6, 5], [4, 6, 0, 7, 1, 3, 5, 2, 9], [1, 3, 5, 2, 9, 4, 0, 8, 6], [0, 0, 2, 5, 8, 6, 0, 4, 1], [2, 7, 6, 9, 3, 8, 1, 5, 4], [9, 5, 4, 6, 2, 1, 8, 7, 3], [8, 1, 3, 4, 7, 5, 6, 9, 2]]; puzzle1FastPass4 = [[5, 4, 1, 8, 6, 2, 9, 3, 7], [6, 2, 9, 3, 5, 7, 4, 1, 8], [3, 8, 7, 1, 4, 9, 2, 6, 5], [4, 6, 8, 7, 1, 3, 5, 2, 9], [1, 3, 5, 2, 9, 4, 7, 8, 6], [7, 9, 2, 5, 8, 6, 0, 4, 1], [2, 7, 6, 9, 3, 8, 1, 5, 4], [9, 5, 4, 6, 2, 1, 8, 7, 3], [8, 1, 3, 4, 7, 5, 6, 9, 2]]; test("squareNumberForLocation", function() {assert.eq(0, squareNumberForLocation(0, 0)); assert.eq(2, squareNumberForLocation(8, 0)); assert.eq(3, squareNumberForLocation(0, 3)); assert.eq(3, squareNumberForLocation(2, 5)); assert.eq(6, squareNumberForLocation(2, 8)); return assert.eq(8, squareNumberForLocation(8, 8));}); test("get9XY", function() {assert.eq([0, 0], get9XY(0)); assert.eq([1, 0], get9XY(1)); assert.eq([2, 0], get9XY(2)); assert.eq([0, 1], get9XY(3)); return assert.eq([2, 2], get9XY(8));}); test("get81XY", function() {assert.eq([0, 0], get81XY(0)); assert.eq([1, 0], get81XY(1)); assert.eq([2, 0], get81XY(2)); assert.eq([8, 0], get81XY(8)); assert.eq([0, 1], get81XY(9)); return assert.eq([8, 8], get81XY(80));}); test("eachElementInColumn", function() {let all; all = []; eachElementInColumn(validBoard, 0, (v) => all.push(v)); assert.eq(all, [5, 6, 3, 4, 1, 7, 2, 9, 8]); all = []; eachElementInColumn(validBoard, 8, (v) => all.push(v)); return assert.eq(all, [7, 8, 5, 9, 6, 1, 4, 3, 2]);}); test("eachElementInRow", function() {let all; all = []; eachElementInRow(validBoard, 0, (v) => all.push(v)); assert.eq(all, [5, 4, 1, 8, 6, 2, 9, 3, 7]); all = []; eachElementInRow(validBoard, 8, (v) => all.push(v)); return assert.eq(all, [8, 1, 3, 4, 7, 5, 6, 9, 2]);}); test("eachElementInSquare", function() {let all; all = []; eachElementInSquare(validBoard, 0, (v) => all.push(v)); assert.eq(all, [5, 4, 1, 6, 2, 9, 3, 8, 7]); all = []; eachElementInSquare(validBoard, 8, (v) => all.push(v)); return assert.eq(all, [1, 5, 4, 8, 7, 3, 6, 9, 2]);}); test("isAllValid", function() {let a, i1; assert.true(isAllValid(validBoard)); a = clone(validBoard); assert.true(isAllValid(a)); i1 = 0; while (i1 < 9) {let i; i = i1; a[i][i]++; assert.false(isAllValid(a)); a[i][i]--; i1++;}; 9; return undefined;}); test("isAllValid when only the squares are invalid", function() {return assert.false(isAllValid(onlySquaresInvalidBoard));}); test("getLegalNumbers", function() {assert.eq(0b10001000, getLegalNumbers(puzzle1, 1, 0)); return assert.eq(0b0010000, getLegalNumbers(puzzle1, 7, 6));}); test("solve only using fastPassMax", function() {return assert.true(isAllValid(solve(puzzle1)));}); test("solve puzzle90 only using recursion", function() {return assert.eq([[7, 2, 5, 4, 8, 3, 6, 1, 9], [4, 1, 6, 5, 7, 9, 3, 2, 8], [3, 9, 8, 6, 2, 1, 5, 7, 4], [2, 4, 3, 1, 9, 6, 8, 5, 7], [6, 5, 1, 8, 4, 7, 2, 9, 3], [9, 8, 7, 2, 3, 5, 4, 6, 1], [8, 6, 2, 9, 1, 4, 7, 3, 5], [1, 7, 4, 3, 5, 2, 9, 8, 6], [5, 3, 9, 7, 6, 8, 1, 4, 2]], solve(puzzle90));}); test("solve empty board", function() {return assert.eq([[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 1, 4, 3, 6, 5, 8, 9, 7], [3, 6, 5, 8, 9, 7, 2, 1, 4], [8, 9, 7, 2, 1, 4, 3, 6, 5], [5, 3, 1, 6, 4, 2, 9, 7, 8], [6, 4, 2, 9, 7, 8, 5, 3, 1], [9, 7, 8, 5, 3, 1, 6, 4, 2]], solve([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]));}); test("solve unsolvable returns undefined", function() {return assert.eq(undefined, solve([[5, 1, 6, 8, 4, 9, 7, 3, 2], [3, 0, 7, 6, 0, 5, 0, 0, 0], [8, 0, 9, 7, 0, 0, 0, 6, 5], [1, 3, 5, 0, 6, 0, 9, 0, 7], [4, 7, 2, 5, 9, 1, 0, 0, 6], [9, 6, 8, 3, 7, 0, 0, 5, 0], [2, 5, 3, 1, 8, 6, 0, 7, 4], [6, 8, 4, 2, 0, 7, 5, 0, 0], [7, 9, 1, 0, 5, 0, 6, 0, 8]]));}); test("isAllLegal for legal boards", function() {assert.true(isAllLegal(puzzle1)); return assert.true(isAllLegal(puzzle90));}); test("isAllLegal for legal boards", function() {assert.false(isAllLegal([[1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]])); assert.false(isAllLegal([[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0]])); assert.false(isAllLegal([[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]])); return assert.true(isAllLegal([[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]));}); boardWith2Solutions = [[0, 5, 0, 0, 0, 0, 0, 0, 0], [3, 7, 4, 0, 8, 0, 0, 9, 0], [0, 0, 1, 2, 0, 3, 4, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 6, 0, 3, 1, 0, 0, 5, 0], [0, 0, 5, 6, 0, 7, 8, 3, 0], [0, 0, 6, 0, 7, 0, 3, 0, 0], [1, 2, 0, 0, 3, 0, 7, 4, 0], [0, 0, 0, 0, 9, 6, 0, 0, 0]]; test("solver returning multiple results", function() {return assert.eq([[[6, 5, 2, 7, 4, 9, 1, 8, 3], [3, 7, 4, 5, 8, 1, 6, 9, 2], [8, 9, 1, 2, 6, 3, 4, 7, 5], [7, 1, 3, 9, 5, 8, 2, 6, 4], [2, 6, 8, 3, 1, 4, 9, 5, 7], [9, 4, 5, 6, 2, 7, 8, 3, 1], [5, 8, 6, 4, 7, 2, 3, 1, 9], [1, 2, 9, 8, 3, 5, 7, 4, 6], [4, 3, 7, 1, 9, 6, 5, 2, 8]], [[6, 5, 2, 7, 4, 9, 1, 8, 3], [3, 7, 4, 5, 8, 1, 6, 9, 2], [8, 9, 1, 2, 6, 3, 4, 7, 5], [7, 4, 3, 9, 5, 8, 2, 6, 1], [2, 6, 8, 3, 1, 4, 9, 5, 7], [9, 1, 5, 6, 2, 7, 8, 3, 4], [5, 8, 6, 4, 7, 2, 3, 1, 9], [1, 2, 9, 8, 3, 5, 7, 4, 6], [4, 3, 7, 1, 9, 6, 5, 2, 8]]], solve(boardWith2Solutions, 10));}); slowToSolveBoard = [[0, 5, 0, 0, 0, 0, 0, 0, 0], [3, 7, 4, 0, 8, 0, 0, 9, 0], [0, 0, 1, 2, 0, 3, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 5, 0], [0, 0, 5, 6, 0, 7, 0, 0, 1], [0, 0, 6, 0, 7, 0, 3, 0, 0], [1, 0, 0, 0, 3, 0, 7, 4, 0], [0, 0, 0, 0, 9, 6, 0, 0, 0]]; test("solve slowToSolveBoard", function() {return assert.eq([[6, 5, 2, 7, 4, 9, 1, 8, 3], [3, 7, 4, 5, 8, 1, 6, 9, 2], [8, 9, 1, 2, 6, 3, 4, 7, 5], [7, 1, 3, 9, 5, 8, 2, 6, 4], [2, 6, 8, 3, 1, 4, 9, 5, 7], [9, 4, 5, 6, 2, 7, 8, 3, 1], [5, 8, 6, 4, 7, 2, 3, 1, 9], [1, 2, 9, 8, 3, 5, 7, 4, 6], [4, 3, 7, 1, 9, 6, 5, 2, 8]], solve(slowToSolveBoard));}); newBlankBoard = function(v = 0, alterations) {let b, into, i; b = (into = [], i = 0, (() => {while (i < 9) {let v1, into1, i1; v1 = i; into.push((into1 = [], i1 = 0, (() => {while (i1 < 9) {let v2; v2 = i1; into1.push(v); i1++;};})(), into1)); i++;};})(), into); Caf.each2(alterations, ([x, y, v]) => b[y][x] = v); return b;}; return describe("identifyLegalPlacements", function() {test("blank board", () => assert.eq(identifyLegalPlacements(newBlankBoard(0)), newBlankBoard(true))); test("good row", () => assert.eq(identifyLegalPlacements(newBlankBoard(0, [[0, 0, 1], [3, 0, 2]])), newBlankBoard(true))); test("good, solved board", () => assert.eq(identifyLegalPlacements(solve(newBlankBoard())), newBlankBoard(true))); test("bad row", () => assert.eq(identifyLegalPlacements(newBlankBoard(0, [[0, 0, 1], [3, 0, 1]])), newBlankBoard(true, [[0, 0, false], [3, 0, false]]))); test("bad column", () => assert.eq(identifyLegalPlacements(newBlankBoard(0, [[0, 0, 1], [0, 3, 1]])), newBlankBoard(true, [[0, 0, false], [0, 3, false]]))); test("bad region", () => assert.eq(identifyLegalPlacements(newBlankBoard(0, [[0, 0, 1], [1, 1, 1]])), newBlankBoard(true, [[0, 0, false], [1, 1, false]]))); return test("regression", () => assert.eq(identifyLegalPlacements([[0, 6, 0, 0, 7, 0, 0, 0, 0], [4, 8, 7, 3, 0, 0, 0, 0, 5], [0, 2, 0, 3, 0, 0, 4, 0, 0], [2, 9, 6, 0, 0, 3, 0, 0, 0], [3, 5, 4, 0, 1, 0, 9, 0, 0], [7, 1, 8, 0, 0, 9, 0, 0, 6], [6, 3, 2, 5, 0, 0, 0, 8, 0], [9, 4, 1, 0, 3, 0, 6, 5, 0], [8, 7, 5, 0, 0, 0, 0, 0, 0]]), newBlankBoard(true, [[3, 1, false], [3, 2, false]])));});});});
//# sourceMappingURL=sodoku.test.js.map
