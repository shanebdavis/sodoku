import &StandardImport, &sudoku

emptyGameBoard = array til 9 with array til 9 with 0

normalizeState = (state) ->
  state extract initialBoard, playerBoard, notesBoard, selectedCell
  return state unless initialBoard && playerBoard && notesBoard

  merge state, {}
    isLegalBoard = isAllLegal initialBoard
    playerBoard
    initialBoard
    notesBoard
    mergedBoard = mergeBoards initialBoard, playerBoard
    autoNotes:    getAllLegalNumbers mergedBoard
    unfinishedNumbers: log getAllUnfinishedNumbers mergedBoard
    solutions =   solve initialBoard, state.maxSolutionsScanned
    solved: eq solutions[0], mergedBoard
    numberCounts: each row in mergedBoard into numberCounts = array to 9 with 0
      each n in row do numberCounts[n]++
    selectedNumber:
      selectedCell && mergedBoard[selectedCell.y][selectedCell.x]

class CurrentGame extends ApplicationState
  @persistant()

  @stateFields normalizeState
    editingBoard:         false
    noteTaking:           false
    selectedCell:         null
    maxSolutionsScanned:  100

    initialBoard:
      5 0 0   0 6 2   9 3 7
      0 2 9   0 0 7   4 1 0
      0 0 7   1 4 9   2 0 5

      4 6 0   0 0 3   0 0 0
      1 0 0   2 9 4   0 0 6
      0 0 0   5 0 0   0 4 1

      2 0 6   9 3 8   1 0 0
      0 5 4   6 0 0   8 7 0
      8 1 3   4 7 0   0 0 2

    playerBoard: defaultPlayerBoard = emptyGameBoard

    notesBoard: defaultPlayerBoard


  setSelectedBoard: (board) -> @[@selectedBoardTime] = board

  setPlayBoard: -> @editingBoard = @noteTaking = false

  @getter
    playing: -> !@editingBoard && !@noteTaking
    selectedBoardTime: ->
      if @editingBoard then :initialBoard
      else if @noteTaking then :notesBoard
      else :playerBoard

    selectedBoard: -> @[@selectedBoardTime]


  postProcessLoadedState: normalizeState

  setState: (key, value) ->
    stateChanged = false
    if isFunction key
      stateChanged = true
      newState = key @state
    else
      if isPlainObject key
        newState = key
      else if isString key
        newState = [key]: value
      key
    super normalizeState merge @state, newState

  setNumber: (number) ->
    if @selectedCell
      @setSelectedBoard array row, y from @selectedBoard
        array c, x from row
          if @selectedCell.x == x && @selectedCell.y == y
            if @noteTaking
              toggleEncodedNumber c, number
            else if @editingBoard || @initialBoard[y][x] == 0
              if number == c then 0 else number

          ? c

  clearNumber: ->
    if @selectedCell
      @setSelectedBoard array row, y from @selectedBoard
        array c, x from row
          if @selectedCell.x == x && @selectedCell.y == y
            0
          else c

  reset: -> @playerBoard = defaultPlayerBoard
  resetNotes: -> @notesBoard = defaultPlayerBoard
  resetAll: -> @initialBoard = @playerBoard = @notesBoard = defaultPlayerBoard

  solve: ->
    @playerBoard =
      try solve @initialBoard
      catch defaultPlayerBoard

  ####################
    View State
  ####################
  moveLeft:  -> @selectedCell = point ((@selectedCell?.x ? 1) - 1) %% 9, @selectedCell?.y
  moveRight: -> @selectedCell = point ((@selectedCell?.x ? 1) + 1) %% 9, @selectedCell?.y

  moveUp:    -> @selectedCell = point @selectedCell?.x, ((@selectedCell?.y ? 1) - 1) %% 9
  moveDown:  -> @selectedCell = point @selectedCell?.x, ((@selectedCell?.y ? 1) + 1) %% 9
