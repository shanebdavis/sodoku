import &StandardImport, &Components, &sudoku

class Game extends FluxComponent
  @subscriptions :currentGame.currentGame :gameView.gameView

  render: ->
    if @currentGame.isLegalBoard
      if @currentGame.editingBoard
        numSolutions =
          @currentGame.solutions
          .length
      else
        solved = eq
          [solution] = @currentGame.solutions
          mergeBoards @currentGame.initialBoard, @currentGame.playerBoard

    Element
      padding: 10
      draw: :white
      on: keyPress: (event) ->
        switch event.props extract key
        when :1 :2 :3 :4 :5 :6 :7 :8 :9 then @models.currentGame.setNumber key | 0
        when ' ' :Delete :Backspace   then @models.currentGame.clearNumber()
        when :ArrowLeft   then @models.currentGame.moveLeft()
        when :ArrowRight  then @models.currentGame.moveRight()
        when :ArrowUp     then @models.currentGame.moveUp()
        when :ArrowDown   then @models.currentGame.moveDown()

        else log key

      ScrollerWithBar
        :column
        :childrenTopCenter
        TextElement
          :childrenSize
          text: "" Adiko - A sodoku game
          fontFamily: :sans-serif
          :textCenterCenter
          fontSize: 30
          margin: 30

        Board()
        NumberBar()


        Element
          padding: top: 10 bottom: 10
          :parentWidthChildrenHeight
          TextElement
            :parentWidthChildrenHeight
            fontFamily: :sans-serif
            text:
              if @models.currentGame.editingBoard
                "Editing: " +
                  if @currentGame.isLegalBoard
                    switch numSolutions
                    when 0 then 'BAD: not solvable'
                    when 1 then 'GOOD: exactly one solution'
                    else if numSolutions < @currentGame.maxSolutionsScanned then 'BAD: #{numSolutions} solutions'
                    else 'BAD: > #{numSolutions} solutions'
                  else 'BAD: illegal'
              else
                (if @currentGame.noteTaking then "Note taking: " else "Playing: ") +
                  if @currentGame.solved
                    "solved!"
                  else "not solved"

        MenuToggle
          icon:   :n
          text:   "" Take Notes
          isOn:   @currentGame.noteTaking
          action: if !@currentGame.editingBoard
            @models.currentGame.setNoteTaking

        array i til @currentGame.saveGames.length
          MenuButton
            icon: :S
            text: "" Select SaveGame #{i + 1}
            rightText: if i == @currentGame.selectedSaveGame then 'selected'
            action: -> @models.currentGame.setSelectedSaveGame i

        MenuButton
          icon: :A
          text: "" Add SaveGame
          action: -> @models.currentGame.addSaveGame()

        MenuToggle
          icon:   :e
          text:   "" Edit Board
          isOn:   @currentGame.editingBoard
          action: @models.currentGame.setEditingBoard

        array isOn, key from @gameView
          MenuToggle {}
            text =  upperCamelCase key, ' '
            icon:   text
            isOn
            action: @models.gameView[lowerCamelCase "set #{key}"]

        MenuButton
          icon: :Reset
          text: "" Reset Notes
          action: @models.currentGame.resetNotes

        MenuButton
          icon: :Solve
          text: :Solve
          action: @models.currentGame.solve

        MenuButton
          icon: :Reset
          text: "" Reset Solution
          action: @models.currentGame.reset

        MenuButton
          icon: :Reset
          text: "" Reset All
          action: if @currentGame.editingBoard
            @models.currentGame.resetAll

        MenuButton
          icon: :Export
          text: :Export
          action: ->
            log formattedInspect &sudoku.mergeBoards @currentGame.initialBoard, @currentGame.playerBoard
