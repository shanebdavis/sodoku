"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Math", "neq"], [global, require('art-standard-lib')], (Math, neq) => {let allLegalNumbers, squareNumberForLocation, isPow2, get81XY, get9XY, eachElementInColunn, eachElementInRow, eachElementInSquare, isValidSequence, allRowsValid, allColumnsValid, allSquaresValid, isAllValid, getValueXY, setValueXY, getLegalNumbers, invLog2, fastPass, fastPassMax, solveR, solve; allLegalNumbers = 0b111111111; return {squareNumberForLocation: squareNumberForLocation = function(x, y) {return (x / 3 | 0) + (y / 3 | 0) * 3;}, isPow2: isPow2 = function(bits) {return bits && !(bits & bits - 1);}, get81XY: get81XY = function(index) {return [index % 9, index / 9 | 0];}, get9XY: get9XY = function(index) {return [index % 3, index / 3 | 0];}, eachElementInColunn: eachElementInColunn = function(data, colNumber, f) {let i1; return (i1 = 0, (() => {while (i1 < 9) {let i; i = i1; f(data[i][colNumber]); i1++;};})(), 9);}, eachElementInRow: eachElementInRow = function(data, rowNumber, f) {let i1; return (i1 = 0, (() => {while (i1 < 9) {let i; i = i1; f(data[rowNumber][i]); i1++;};})(), 9);}, eachElementInSquare: eachElementInSquare = function(data, squareNumber, f) {let x, y, i1; ([x, y] = get9XY(squareNumber)); return (i1 = 0, (() => {while (i1 < 9) {let c, i, j; c = i1; ([i, j] = get9XY(c)); f(data[y * 3 + j][x * 3 + i]); i1++;};})(), 9);}, isValidSequence: isValidSequence = function(data, sequenceNumber, eachElementInSequence) {let num; num = 0; eachElementInSequence(data, sequenceNumber, (v) => num += 1 << v - 1); return num === 511;}, allRowsValid: allRowsValid = function(data) {let into, i1; return !(into = null, i1 = 0, (() => {while (i1 < 9) {let i; i = i1; if (into = !isValidSequence(data, i, eachElementInRow)) {break;}; i1++;};})(), into || null);}, allColumnsValid: allColumnsValid = function(data) {let into, i1; return !(into = null, i1 = 0, (() => {while (i1 < 9) {let i; i = i1; if (into = !isValidSequence(data, i, eachElementInColunn)) {break;}; i1++;};})(), into || null);}, allSquaresValid: allSquaresValid = function(data) {let into, i1; return !(into = null, i1 = 0, (() => {while (i1 < 9) {let i; i = i1; if (into = !isValidSequence(data, i, eachElementInSquare)) {break;}; i1++;};})(), into || null);}, isAllValid: isAllValid = function(data) {return allRowsValid(data) && allColumnsValid(data) && allSquaresValid(data);}, getValueXY: getValueXY = function(data, x, y) {return data[y][x];}, setValueXY: setValueXY = function(data, x, y, v) {return data[y][x] = v;}, getLegalNumbers: getLegalNumbers = function(data, x, y) {let squareNumber, illegalNumbers; squareNumber = squareNumberForLocation(x, y); illegalNumbers = 0; eachElementInColunn(data, x, (v) => (v > 0) ? illegalNumbers |= 1 << v - 1 : undefined); eachElementInRow(data, y, (v) => (v > 0) ? illegalNumbers |= 1 << v - 1 : undefined); eachElementInSquare(data, squareNumber, (v) => (v > 0) ? illegalNumbers |= 1 << v - 1 : undefined); return allLegalNumbers - illegalNumbers;}, invLog2: invLog2 = 1 / Math.log(2), fastPass: fastPass = function(data) {return Caf.array(data, (row, y) => Caf.array(row, (v, x) => {let legalNumbers; return (v === 0 && isPow2(legalNumbers = getLegalNumbers(data, x, y))) ? Math.log(legalNumbers) * invLog2 + 1.01 | 0 : v;}));}, fastPassMax: fastPassMax = function(data) {let newData; newData = null; while (neq(data, newData = fastPass(data))) {data = newData;}; return data;}, solveR: solveR = function(data, i81 = 0) {let x, y, v, legalNumbers, into, i1; ([x, y] = get81XY(i81)); v = getValueXY(data, x, y); return (v === 0) ? (0 !== (legalNumbers = getLegalNumbers(data, x, y))) ? (into = null, i1 = 0, (() => {while (i1 < 9) {let i, result; i = i1; if (into = (legalNumbers & 1 << i) ? (setValueXY(data, x, y, i + 1), (i81 === 80) ? data : (result = solveR(data, i81 + 1)) ? result : (setValueXY(data, x, y, 0), undefined)) : undefined) {break;}; i1++;};})(), into || null) : undefined : (i81 < 80) ? solveR(data, i81 + 1) : data;}, solve: solve = function(data, a) {return solveR(fastPassMax(data));}};});});
//# sourceMappingURL=sodoku.js.map
