import &ArtStandardLib

allLegalNumbers = 0b111111111 # 9 1-bits

{}
  ###################################
    Handy Validators; not essential
  ###################################
  isValidSequence = (data, sequenceNumber, eachElementInSequence) ->
    num = 0
    eachElementInSequence data, sequenceNumber, (v) -> num += 1 << (v - 1)
    num == 511

  allRowsValid    = (data) -> !find i til 9 with !isValidSequence data, i, eachElementInRow
  allColumnsValid = (data) -> !find i til 9 with !isValidSequence data, i, eachElementInColunn
  allSquaresValid = (data) -> !find i til 9 with !isValidSequence data, i, eachElementInSquare

  isAllValid = (data) ->
    allRowsValid data
    && allColumnsValid data
    && allSquaresValid data

  ###################################
    Essential Solver
  ###################################
  squareNumberForLocation = (x, y) -> (x / 3 | 0) + (y / 3 | 0) * 3

  get81XY = (index) -> index % 9, index / 9 | 0
  get9XY  = (index) -> index % 3, index / 3 | 0

  eachElementInColunn = (data, colNumber, f) -> each i til 9 with f data[i][colNumber]
  eachElementInRow    = (data, rowNumber, f) -> each i til 9 with f data[rowNumber][i]

  eachElementInSquare = (data, squareNumber, f) ->
    [x, y] = get9XY squareNumber
    each c til 9
      [i, j] = get9XY c
      f data[y * 3 + j][x * 3 + i]

  getLegalNumbers = (data, x, y) ->
    squareNumber = squareNumberForLocation x, y
    illegalNumbers = 0
    eachElementInColunn data, x,            (v) -> if v > 0 then illegalNumbers |= 1 << (v - 1)
    eachElementInRow    data, y,            (v) -> if v > 0 then illegalNumbers |= 1 << (v - 1)
    eachElementInSquare data, squareNumber, (v) -> if v > 0 then illegalNumbers |= 1 << (v - 1)
    allLegalNumbers - illegalNumbers

  invLog2 = 1 / Math.log(2)

  solveR = (data, i81 = 0)  ->
    [x, y] = get81XY i81
    v = data[y][x]
    if v == 0
      if 0 != legalNumbers = getLegalNumbers data, x, y
        find i til 9
          if legalNumbers & (1 << i)
            data[y][x] = i + 1
            if i81 == 80
              data

            else if result = solveR data, i81 + 1
              result

            else
              data[y][x] = 0
              undefined

        || undefined

    else if i81 < 80
      solveR data, i81 + 1

    else data

  ## solve
    IN: data: sodoku board
    OUT: fully solved board, if possible, else: undefined
  solve = (data, a) ->
    solveR clone data
