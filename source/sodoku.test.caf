import &ArtStandardLib, &ArtTestbench, &sodoku

validBoard =
  5 4 1   8 6 2   9 3 7
  6 2 9   3 5 7   4 1 8
  3 8 7   1 4 9   2 6 5

  4 6 8   7 1 3   5 2 9
  1 3 5   2 9 4   7 8 6
  7 9 2   5 8 6   3 4 1

  2 7 6   9 3 8   1 5 4
  9 5 4   6 2 1   8 7 3
  8 1 3   4 7 5   6 9 2

onlySquaresInvalidBoard =
  1 2 3   4 5 6   7 8 9
  9 1 2   3 4 5   6 7 8
  8 9 1   2 3 4   5 6 7

  7 8 9   1 2 3   4 5 6
  6 7 8   9 1 2   3 4 5
  5 6 7   8 9 1   2 3 4

  4 5 6   7 8 9   1 2 3
  3 4 5   6 7 8   9 1 2
  2 3 4   5 6 7   8 9 1

puzzle90 =
  0 2 5   4 0 0   6 0 0
  4 0 0   0 0 9   0 0 0
  0 0 0   0 2 0   5 7 0

  2 0 0   1 0 0   0 5 7
  0 0 1   0 4 0   2 0 0
  9 8 0   0 0 5   0 0 1

  0 6 2   0 1 0   0 0 0
  0 0 0   3 0 0   0 0 6
  0 0 9   0 0 8   1 4 0

puzzle1 =
  5 0 0   0 6 2   9 3 7
  0 2 9   0 0 7   4 1 0
  0 0 7   1 4 9   2 0 5

  4 6 0   0 0 3   0 0 0
  1 0 0   2 9 4   0 0 6
  0 0 0   5 0 0   0 4 1

  2 0 6   9 3 8   1 0 0
  0 5 4   6 0 0   8 7 0
  8 1 3   4 7 0   0 0 2

puzzle1FastPass1 =
  5 0 0   8 6 2   9 3 7
  0 2 9   0 0 7   4 1 8
  0 0 7   1 4 9   2 0 5

  4 6 0   0 0 3   0 0 0
  1 0 0   2 9 4   0 0 6
  0 0 0   5 8 6   0 4 1

  2 7 6   9 3 8   1 5 4
  9 5 4   6 0 1   8 7 0
  8 1 3   4 7 5   0 0 2

puzzle1FastPass2 =
  5 4 1   8 6 2   9 3 7
  0 2 9   3 5 7   4 1 8
  0 0 7   1 4 9   2 6 5

  4 6 0   7 1 3   0 0 9
  1 0 0   2 9 4   0 8 6
  0 0 2   5 8 6   0 4 1

  2 7 6   9 3 8   1 5 4
  9 5 4   6 2 1   8 7 3
  8 1 3   4 7 5   6 0 2

puzzle1FastPass3 =
  5 4 1   8 6 2   9 3 7
  6 2 9   3 5 7   4 1 8
  3 0 7   1 4 9   2 6 5

  4 6 0   7 1 3   5 2 9
  1 3 5   2 9 4   0 8 6
  0 0 2   5 8 6   0 4 1

  2 7 6   9 3 8   1 5 4
  9 5 4   6 2 1   8 7 3
  8 1 3   4 7 5   6 9 2

puzzle1FastPass4 =
  5 4 1   8 6 2   9 3 7
  6 2 9   3 5 7   4 1 8
  3 8 7   1 4 9   2 6 5

  4 6 8   7 1 3   5 2 9
  1 3 5   2 9 4   7 8 6
  7 9 2   5 8 6   0 4 1

  2 7 6   9 3 8   1 5 4
  9 5 4   6 2 1   8 7 3
  8 1 3   4 7 5   6 9 2

test :get9XY ->
  assert.eq [0, 0], get9XY 0
  assert.eq [1, 0], get9XY 1
  assert.eq [2, 0], get9XY 2
  assert.eq [0, 1], get9XY 3
  assert.eq [2, 2], get9XY 8

test :get81XY ->
  assert.eq [0, 0], get81XY 0
  assert.eq [1, 0], get81XY 1
  assert.eq [2, 0], get81XY 2
  assert.eq [8, 0], get81XY 8
  assert.eq [0, 1], get81XY 9
  assert.eq [8, 8], get81XY 80

test :eachElementInColunn ->
  all = []
  eachElementInColunn validBoard, 0, (v) -> all.push v
  assert.eq all, [] 5, 6, 3, 4, 1, 7, 2, 9, 8

  all = []
  eachElementInColunn validBoard, 8, (v) -> all.push v
  assert.eq all, [] 7, 8, 5, 9, 6, 1, 4, 3, 2

test :eachElementInRow ->
  all = []
  eachElementInRow validBoard, 0, (v) -> all.push v
  assert.eq all, [] 5, 4, 1, 8, 6, 2, 9, 3, 7

  all = []
  eachElementInRow validBoard, 8, (v) -> all.push v
  assert.eq all, [] 8, 1, 3, 4, 7, 5, 6, 9, 2

test :eachElementInSquare ->
  all = []
  eachElementInSquare validBoard, 0, (v) -> all.push v
  assert.eq all, [] 5 4 1   6 2 9   3 8 7

  all = []
  eachElementInSquare validBoard, 8, (v) -> all.push v
  assert.eq all, [] 1 5 4   8 7 3   6 9 2

test :isAllValid ->
  assert.true isAllValid validBoard
  a = clone validBoard
  assert.true isAllValid a

  each i til 9
    a[i][i]++
    assert.false isAllValid a
    a[i][i]--

  undefined

test "isAllValid when only the squares are invalid" ->
  assert.true allRowsValid onlySquaresInvalidBoard
  assert.true allColumnsValid onlySquaresInvalidBoard
  assert.false allSquaresValid onlySquaresInvalidBoard
  assert.false isAllValid onlySquaresInvalidBoard

test :getLegalNumbers ->
  assert.eq
    0b10001000
    getLegalNumbers puzzle1, 1, 0

  assert.eq
    0b0010000
    getLegalNumbers puzzle1, 7, 6

test "solve only using fastPassMax" ->
  assert.true isAllValid solve puzzle1

test "solve puzzle90 only using recursion" ->
  assert.eq
    []
      7 2 5   4 8 3   6 1 9
      4 1 6   5 7 9   3 2 8
      3 9 8   6 2 1   5 7 4

      2 4 3   1 9 6   8 5 7
      6 5 1   8 4 7   2 9 3
      9 8 7   2 3 5   4 6 1

      8 6 2   9 1 4   7 3 5
      1 7 4   3 5 2   9 8 6
      5 3 9   7 6 8   1 4 2
    solve puzzle90

test "solve empty board" ->
  assert.eq
    []
      1 2 3   4 5 6   7 8 9
      4 5 6   7 8 9   1 2 3
      7 8 9   1 2 3   4 5 6

      2 1 4   3 6 5   8 9 7
      3 6 5   8 9 7   2 1 4
      8 9 7   2 1 4   3 6 5

      5 3 1   6 4 2   9 7 8
      6 4 2   9 7 8   5 3 1
      9 7 8   5 3 1   6 4 2

    solve []
      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0

      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0

      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0
      0 0 0   0 0 0   0 0 0

test "solve unsolvable returns undefined" ->
  assert.eq
    undefined
    solve [] # from: https://www.sudokudragon.com/unsolvable.htm
      5 1 6   8 4 9   7 3 2
      3 0 7   6 0 5   0 0 0
      8 0 9   7 0 0   0 6 5

      1 3 5   0 6 0   9 0 7
      4 7 2   5 9 1   0 0 6
      9 6 8   3 7 0   0 5 0

      2 5 3   1 8 6   0 7 4 # << col 6 has no legal values
      6 8 4   2 0 7   5 0 0
      7 9 1   0 5 0   6 0 8
